let id = 0,
  callbacks = {},
  registerFuncs = {};

const browser = {
  versions: (function() {
    let u = navigator.userAgent,
      app = navigator.appVersion;
    return {
      ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), // ios
      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, // android
      iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, // iPhone
      iPad: u.indexOf('iPad') > -1
    };
  })(),
  language: (navigator.browserLanguage || navigator.language).toLowerCase()
};

window.JSBridge = {
  // 调用Native
  invoke(bridgeName, callback, data = {}) {
    console.log(bridgeName);
    // 判断环境
    const thisId = id++;
    callbacks[thisId] = callback;
    let nativeBridge;
    let params = {
      bridgeName,
      data,
      callbackId: thisId
    };
    if (browser.versions.android) {
      console.log('Android环境------');
      nativeBridge = window.nativeBridge;
      params = JSON.stringify(params);
    } else if (browser.versions.iPhone) {
      console.log('iPhone环境------');
      nativeBridge = window.webkit.messageHandlers.nativeBridge;
    } else {
      alert('非Android、iPhone环境。');
      return false;
    }
    nativeBridge.postMessage(params);
  },
  receiveMessage(msg) {
    console.log(msg);
    let bridgeName = msg.bridgeName,
      data = msg.data || {},
      callbackId = msg.callbackId, // Native 将 callbackId 原封不动传回
      responseId = msg.responseId;
    // 具体逻辑
    // bridgeName 和 callbackId 不会同时存在
    if (callbackId) {
      if (callbacks[callbackId]) {
        callbacks[callbackId](msg.data);
      }
    } else if (bridgeName) {
      if (registerFuncs[bridgeName]) {
        // 通过 bridgeName 找到句柄
        let ret = {},
          flag = false;
        registerFuncs[bridgeName].forEach((callback) => {
          callback(data, (r) => {
            flag = true;
            ret = Object.assign(ret, r);
            alert(ret);
          });
        });
        if (flag) {
          window.webkit.messageHandlers.nativeBridge.postMessage({
            responseId,
            ret
          });
        }
      }
    }
  },
  register: (bridgeName, callback) => {
    if (!registerFuncs[bridgeName]) {
      registerFuncs[bridgeName] = [];
    }
    registerFuncs[bridgeName].push(callback);
  }
};

console.log(window.JSBridge);
